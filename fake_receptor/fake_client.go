// This file was generated by counterfeiter
package fake_receptor

import (
	"sync"

	"github.com/cloudfoundry-incubator/receptor"
)

type FakeClient struct {
	CreateTaskStub        func(receptor.TaskCreateRequest) error
	createTaskMutex       sync.RWMutex
	createTaskArgsForCall []struct {
		arg1 receptor.TaskCreateRequest
	}
	createTaskReturns struct {
		result1 error
	}
	GetAllTasksStub        func() ([]receptor.TaskResponse, error)
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct{}
	getAllTasksReturns struct {
		result1 []receptor.TaskResponse
		result2 error
	}
	GetAllTasksByDomainStub        func(domain string) ([]receptor.TaskResponse, error)
	getAllTasksByDomainMutex       sync.RWMutex
	getAllTasksByDomainArgsForCall []struct {
		domain string
	}
	getAllTasksByDomainReturns struct {
		result1 []receptor.TaskResponse
		result2 error
	}
	GetTaskStub        func(taskId string) (receptor.TaskResponse, error)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
		taskId string
	}
	getTaskReturns struct {
		result1 receptor.TaskResponse
		result2 error
	}
	DeleteTaskStub        func(taskId string) error
	deleteTaskMutex       sync.RWMutex
	deleteTaskArgsForCall []struct {
		taskId string
	}
	deleteTaskReturns struct {
		result1 error
	}
	CreateDesiredLRPStub        func(receptor.DesiredLRPCreateRequest) error
	createDesiredLRPMutex       sync.RWMutex
	createDesiredLRPArgsForCall []struct {
		arg1 receptor.DesiredLRPCreateRequest
	}
	createDesiredLRPReturns struct {
		result1 error
	}
	UpdateDesiredLRPStub        func(processGuid string, update receptor.DesiredLRPUpdateRequest) error
	updateDesiredLRPMutex       sync.RWMutex
	updateDesiredLRPArgsForCall []struct {
		processGuid string
		update      receptor.DesiredLRPUpdateRequest
	}
	updateDesiredLRPReturns struct {
		result1 error
	}
	GetAllDesiredLRPsStub        func() ([]receptor.DesiredLRPResponse, error)
	getAllDesiredLRPsMutex       sync.RWMutex
	getAllDesiredLRPsArgsForCall []struct{}
	getAllDesiredLRPsReturns struct {
		result1 []receptor.DesiredLRPResponse
		result2 error
	}
	GetAllDesiredLRPsByDomainStub        func(domain string) ([]receptor.DesiredLRPResponse, error)
	getAllDesiredLRPsByDomainMutex       sync.RWMutex
	getAllDesiredLRPsByDomainArgsForCall []struct {
		domain string
	}
	getAllDesiredLRPsByDomainReturns struct {
		result1 []receptor.DesiredLRPResponse
		result2 error
	}
	GetDesiredLRPByProcessGuidStub        func(processGuid string) (receptor.DesiredLRPResponse, error)
	getDesiredLRPByProcessGuidMutex       sync.RWMutex
	getDesiredLRPByProcessGuidArgsForCall []struct {
		processGuid string
	}
	getDesiredLRPByProcessGuidReturns struct {
		result1 receptor.DesiredLRPResponse
		result2 error
	}
}

func (fake *FakeClient) CreateTask(arg1 receptor.TaskCreateRequest) error {
	fake.createTaskMutex.Lock()
	fake.createTaskArgsForCall = append(fake.createTaskArgsForCall, struct {
		arg1 receptor.TaskCreateRequest
	}{arg1})
	fake.createTaskMutex.Unlock()
	if fake.CreateTaskStub != nil {
		return fake.CreateTaskStub(arg1)
	} else {
		return fake.createTaskReturns.result1
	}
}

func (fake *FakeClient) CreateTaskCallCount() int {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return len(fake.createTaskArgsForCall)
}

func (fake *FakeClient) CreateTaskArgsForCall(i int) receptor.TaskCreateRequest {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return fake.createTaskArgsForCall[i].arg1
}

func (fake *FakeClient) CreateTaskReturns(result1 error) {
	fake.CreateTaskStub = nil
	fake.createTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetAllTasks() ([]receptor.TaskResponse, error) {
	fake.getAllTasksMutex.Lock()
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct{}{})
	fake.getAllTasksMutex.Unlock()
	if fake.GetAllTasksStub != nil {
		return fake.GetAllTasksStub()
	} else {
		return fake.getAllTasksReturns.result1, fake.getAllTasksReturns.result2
	}
}

func (fake *FakeClient) GetAllTasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeClient) GetAllTasksReturns(result1 []receptor.TaskResponse, result2 error) {
	fake.GetAllTasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []receptor.TaskResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetAllTasksByDomain(domain string) ([]receptor.TaskResponse, error) {
	fake.getAllTasksByDomainMutex.Lock()
	fake.getAllTasksByDomainArgsForCall = append(fake.getAllTasksByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllTasksByDomainMutex.Unlock()
	if fake.GetAllTasksByDomainStub != nil {
		return fake.GetAllTasksByDomainStub(domain)
	} else {
		return fake.getAllTasksByDomainReturns.result1, fake.getAllTasksByDomainReturns.result2
	}
}

func (fake *FakeClient) GetAllTasksByDomainCallCount() int {
	fake.getAllTasksByDomainMutex.RLock()
	defer fake.getAllTasksByDomainMutex.RUnlock()
	return len(fake.getAllTasksByDomainArgsForCall)
}

func (fake *FakeClient) GetAllTasksByDomainArgsForCall(i int) string {
	fake.getAllTasksByDomainMutex.RLock()
	defer fake.getAllTasksByDomainMutex.RUnlock()
	return fake.getAllTasksByDomainArgsForCall[i].domain
}

func (fake *FakeClient) GetAllTasksByDomainReturns(result1 []receptor.TaskResponse, result2 error) {
	fake.GetAllTasksByDomainStub = nil
	fake.getAllTasksByDomainReturns = struct {
		result1 []receptor.TaskResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetTask(taskId string) (receptor.TaskResponse, error) {
	fake.getTaskMutex.Lock()
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
		taskId string
	}{taskId})
	fake.getTaskMutex.Unlock()
	if fake.GetTaskStub != nil {
		return fake.GetTaskStub(taskId)
	} else {
		return fake.getTaskReturns.result1, fake.getTaskReturns.result2
	}
}

func (fake *FakeClient) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeClient) GetTaskArgsForCall(i int) string {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return fake.getTaskArgsForCall[i].taskId
}

func (fake *FakeClient) GetTaskReturns(result1 receptor.TaskResponse, result2 error) {
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 receptor.TaskResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteTask(taskId string) error {
	fake.deleteTaskMutex.Lock()
	fake.deleteTaskArgsForCall = append(fake.deleteTaskArgsForCall, struct {
		taskId string
	}{taskId})
	fake.deleteTaskMutex.Unlock()
	if fake.DeleteTaskStub != nil {
		return fake.DeleteTaskStub(taskId)
	} else {
		return fake.deleteTaskReturns.result1
	}
}

func (fake *FakeClient) DeleteTaskCallCount() int {
	fake.deleteTaskMutex.RLock()
	defer fake.deleteTaskMutex.RUnlock()
	return len(fake.deleteTaskArgsForCall)
}

func (fake *FakeClient) DeleteTaskArgsForCall(i int) string {
	fake.deleteTaskMutex.RLock()
	defer fake.deleteTaskMutex.RUnlock()
	return fake.deleteTaskArgsForCall[i].taskId
}

func (fake *FakeClient) DeleteTaskReturns(result1 error) {
	fake.DeleteTaskStub = nil
	fake.deleteTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateDesiredLRP(arg1 receptor.DesiredLRPCreateRequest) error {
	fake.createDesiredLRPMutex.Lock()
	fake.createDesiredLRPArgsForCall = append(fake.createDesiredLRPArgsForCall, struct {
		arg1 receptor.DesiredLRPCreateRequest
	}{arg1})
	fake.createDesiredLRPMutex.Unlock()
	if fake.CreateDesiredLRPStub != nil {
		return fake.CreateDesiredLRPStub(arg1)
	} else {
		return fake.createDesiredLRPReturns.result1
	}
}

func (fake *FakeClient) CreateDesiredLRPCallCount() int {
	fake.createDesiredLRPMutex.RLock()
	defer fake.createDesiredLRPMutex.RUnlock()
	return len(fake.createDesiredLRPArgsForCall)
}

func (fake *FakeClient) CreateDesiredLRPArgsForCall(i int) receptor.DesiredLRPCreateRequest {
	fake.createDesiredLRPMutex.RLock()
	defer fake.createDesiredLRPMutex.RUnlock()
	return fake.createDesiredLRPArgsForCall[i].arg1
}

func (fake *FakeClient) CreateDesiredLRPReturns(result1 error) {
	fake.CreateDesiredLRPStub = nil
	fake.createDesiredLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateDesiredLRP(processGuid string, update receptor.DesiredLRPUpdateRequest) error {
	fake.updateDesiredLRPMutex.Lock()
	fake.updateDesiredLRPArgsForCall = append(fake.updateDesiredLRPArgsForCall, struct {
		processGuid string
		update      receptor.DesiredLRPUpdateRequest
	}{processGuid, update})
	fake.updateDesiredLRPMutex.Unlock()
	if fake.UpdateDesiredLRPStub != nil {
		return fake.UpdateDesiredLRPStub(processGuid, update)
	} else {
		return fake.updateDesiredLRPReturns.result1
	}
}

func (fake *FakeClient) UpdateDesiredLRPCallCount() int {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return len(fake.updateDesiredLRPArgsForCall)
}

func (fake *FakeClient) UpdateDesiredLRPArgsForCall(i int) (string, receptor.DesiredLRPUpdateRequest) {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return fake.updateDesiredLRPArgsForCall[i].processGuid, fake.updateDesiredLRPArgsForCall[i].update
}

func (fake *FakeClient) UpdateDesiredLRPReturns(result1 error) {
	fake.UpdateDesiredLRPStub = nil
	fake.updateDesiredLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetAllDesiredLRPs() ([]receptor.DesiredLRPResponse, error) {
	fake.getAllDesiredLRPsMutex.Lock()
	fake.getAllDesiredLRPsArgsForCall = append(fake.getAllDesiredLRPsArgsForCall, struct{}{})
	fake.getAllDesiredLRPsMutex.Unlock()
	if fake.GetAllDesiredLRPsStub != nil {
		return fake.GetAllDesiredLRPsStub()
	} else {
		return fake.getAllDesiredLRPsReturns.result1, fake.getAllDesiredLRPsReturns.result2
	}
}

func (fake *FakeClient) GetAllDesiredLRPsCallCount() int {
	fake.getAllDesiredLRPsMutex.RLock()
	defer fake.getAllDesiredLRPsMutex.RUnlock()
	return len(fake.getAllDesiredLRPsArgsForCall)
}

func (fake *FakeClient) GetAllDesiredLRPsReturns(result1 []receptor.DesiredLRPResponse, result2 error) {
	fake.GetAllDesiredLRPsStub = nil
	fake.getAllDesiredLRPsReturns = struct {
		result1 []receptor.DesiredLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetAllDesiredLRPsByDomain(domain string) ([]receptor.DesiredLRPResponse, error) {
	fake.getAllDesiredLRPsByDomainMutex.Lock()
	fake.getAllDesiredLRPsByDomainArgsForCall = append(fake.getAllDesiredLRPsByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllDesiredLRPsByDomainMutex.Unlock()
	if fake.GetAllDesiredLRPsByDomainStub != nil {
		return fake.GetAllDesiredLRPsByDomainStub(domain)
	} else {
		return fake.getAllDesiredLRPsByDomainReturns.result1, fake.getAllDesiredLRPsByDomainReturns.result2
	}
}

func (fake *FakeClient) GetAllDesiredLRPsByDomainCallCount() int {
	fake.getAllDesiredLRPsByDomainMutex.RLock()
	defer fake.getAllDesiredLRPsByDomainMutex.RUnlock()
	return len(fake.getAllDesiredLRPsByDomainArgsForCall)
}

func (fake *FakeClient) GetAllDesiredLRPsByDomainArgsForCall(i int) string {
	fake.getAllDesiredLRPsByDomainMutex.RLock()
	defer fake.getAllDesiredLRPsByDomainMutex.RUnlock()
	return fake.getAllDesiredLRPsByDomainArgsForCall[i].domain
}

func (fake *FakeClient) GetAllDesiredLRPsByDomainReturns(result1 []receptor.DesiredLRPResponse, result2 error) {
	fake.GetAllDesiredLRPsByDomainStub = nil
	fake.getAllDesiredLRPsByDomainReturns = struct {
		result1 []receptor.DesiredLRPResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetDesiredLRPByProcessGuid(processGuid string) (receptor.DesiredLRPResponse, error) {
	fake.getDesiredLRPByProcessGuidMutex.Lock()
	fake.getDesiredLRPByProcessGuidArgsForCall = append(fake.getDesiredLRPByProcessGuidArgsForCall, struct {
		processGuid string
	}{processGuid})
	fake.getDesiredLRPByProcessGuidMutex.Unlock()
	if fake.GetDesiredLRPByProcessGuidStub != nil {
		return fake.GetDesiredLRPByProcessGuidStub(processGuid)
	} else {
		return fake.getDesiredLRPByProcessGuidReturns.result1, fake.getDesiredLRPByProcessGuidReturns.result2
	}
}

func (fake *FakeClient) GetDesiredLRPByProcessGuidCallCount() int {
	fake.getDesiredLRPByProcessGuidMutex.RLock()
	defer fake.getDesiredLRPByProcessGuidMutex.RUnlock()
	return len(fake.getDesiredLRPByProcessGuidArgsForCall)
}

func (fake *FakeClient) GetDesiredLRPByProcessGuidArgsForCall(i int) string {
	fake.getDesiredLRPByProcessGuidMutex.RLock()
	defer fake.getDesiredLRPByProcessGuidMutex.RUnlock()
	return fake.getDesiredLRPByProcessGuidArgsForCall[i].processGuid
}

func (fake *FakeClient) GetDesiredLRPByProcessGuidReturns(result1 receptor.DesiredLRPResponse, result2 error) {
	fake.GetDesiredLRPByProcessGuidStub = nil
	fake.getDesiredLRPByProcessGuidReturns = struct {
		result1 receptor.DesiredLRPResponse
		result2 error
	}{result1, result2}
}

var _ receptor.Client = new(FakeClient)
